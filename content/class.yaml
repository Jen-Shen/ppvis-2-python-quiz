code: |
  class A:
    x = 1

  class B:
    pass

  class C(A):
    pass

  B.x = 2
  A.x = 3

  print(A.x, B.x, C.x)
output: "3 2 3"
tag:
  - class/variable

---

code: |
  from dataclasses import dataclass

  @dataclass
  class User:
    name: str
    age: int = 1

  user = User()

  print(user.age)
output: "TypeError: __init__() missing 1 required positional argument: 'name'"
tag:
  - class/dataclass

---

code: |
  class Vec:
    def __init__(self, x, y):
      self.x = x
      self.y = y

    def __add__(self, other):
      return Vec(self.x + other.x, self.y + other.y)

  a = Vec(2, 4)
  b = Vec(4, 0)

  z = a + b
  print(z.x * z.y)
output: "24"
tag:
  - class/method/__add__

---

code: |
  class A:
    def __init__(self, i):
    self.i = i

    def __eq__(self, __o: object) -> bool:
      return self.i == __o.i

  a1 = A(1)
  a2 = A(2)
  a3 = A(2)

  values = [a1, a2, a3]

  print(values.count(a2))
output: "2"
tag:
  - class/method/__eq__

---

code: |
  class MyClass:
    def __init__(self):
    self.message = 'Hello, World'


  def say_hello(self):
    print(self.message)

  MyClass.say_hello = say_hello

  a = MyClass()

  a.say_hello()
output: "Hello, World"
tag:
  - class/prototype

---

code: |
  class A():
    def __len__(self):
    return 0

  obj = A()
  print(bool(obj))
output: "False"
tag:
  - class/method/__len__

---

code: |
  class Person:
    def __init__(hey, name, age):
    hey.name = name
    hey.age = age

    def myfunc(abc):
    print("Hello my name is " + abc.name)

  p1 = Person("John", 36)
  p1.myfunc()
output: "Hello my name is John"
tag:
  - class/self

---

code: |
  class Person:
    def __init__(hey, name, age):
    hey.name = name
    hey.age = age

    def my_age(abs):
    print("Hello my name is " + abs.age)

  p1 = Person("John", 36)

  del p1.age

  p1.my_age()
output: "AttributeError: 'Person' object has no attribute 'age'"
tag:
  - statement/del
  - class/property

---

code: |
  class Person:
    def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

    def printname(self):
    print(self.firstname, self.lastname)

  class Student(Person):
    def __init__(self, fname, lname):
    super().__init__(fname, lname)

  x = Student("Mike", "Olsen")

  x.printname()
output: "Mike Olsen"
tag:
  - class/super
  - class/inheritance

---

code: |
  class Person:
    def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

    def printname(self):
    print(self.firstname, self.lastname)

  class Student(Person):
    def __init__(self, fname, lname):
    self.fname = fname
    self.lname = lname
    
  x = Student("Mike", "Olsen")

  x.printname()
output: "AttributeError: 'Student' object has no attribute 'firstname'"
tag:
  - class/super
  - class/inheritance

---

code: |
  class A(ABC):
    @abstractmethod
    def printer(self):
      print("Hello")

  class B(A):
    def __init__(self):
      pass

  a = A()
  a.printer()

  b= B()
  b.printer()
output: "Can't instantiate abstract class A with abstract methods printer"
tag:
  - class/method/abstractmethod

---

code: |
  class Vehicle:
    def __init__(self, speed):
      if speed > 240:
        print(self.speed)
      self.speed = speed

  car = Vehicle(350);
output: "AttributeError: 'Vehicle' object has no attribute 'speed' "
tag:
  - class/variable


---

code: |
  class Marks:
    def __init__(self, a, b):
      self.a =a
      self.b =b

    @staticmethod
    def Math_num():
      return self.a + self.b

  a = Marks(5, 6)
  print(a.Math_num())
output: "NameError: name 'self' is not defined "
tag:
  - class/method/staticmethod

---

code: |
  class A:
    @classmethod
    def classmethod():
      print('Class method called')

  a=A()
  a.classmethod()
output: "TypeError: classmethod() takes 0 positional arguments but 1 was given "
tag:
  - class/classmethod

---

code: |
  class A(object):
    def __init__(self):
      print("1")
  class B(A):
    def __init__(self):
      print("2")
      super().__init__()

  b = B()
output: "2 1"
tag:
  - class/method/super

---

code: |
  class Point:
    def __init__( self, x=0, y=0):
      self.x = x
      self.y = y
    def __del__(self):
      class_name = self.__class__.__name__
      print (class_name, "destroyed")

  class Pixel(Point):
    def __init__( self):
      super().__init__()

  b = Pixel()
output: "Point destroyed Pixel destroyed"
tag:
  - class/method/del

---

code: |
  class A(object):
    foo = 1

  class B(A):
    pass

  class C(A):
    foo = 2

  class D(C, B):
    pass

  d = D()
  print(d.foo)
output: "2"
tag:
  - class/inherit

---
code: |
  class SimpleClass:
    val = 1
    def __init__(self, n):
      val = n

  s = SimpleClass(5)
  print(s.val)
output: "1"
tag:
  - class/variable

---

code: |
  class A:
    def __init__(self):
      self.x = 5
    
  class B(A):
    pass

  print(isinstance(B, A))
output: "False"
tag:
  - class/inherit #build-in/isinstance

---

code: |
  class BankCard:
    def __init__(self, x):
      self.balance = x

    def __lt__(self, other):
      return self.balance < other.balance

  card1 = BankCard(700)
  card2 = BankCard(200)
  print(card1 > card2)
output: "True"
tag:
  - class/method/lt

---
code: |
  class PersonHeight:
    def __init__(self, x):
      self.height = x

    def __gt__(self, other):
      return self.height < other.height

  height1 = PersonHeight(170)
  height2 = PersonHeight(165)
  print(height1 >= height2)
output: "TypeError: '>=' not supported between instances of 'PersonHeight' and 'PersonHeight"
tag:
  - class/method/lt

---
code: |
  class Clock:
    def __init__(self, sec):
      self.seconds = sec

    def __eq__(self, other):
      return self.seconds == other.seconds

  t1 = Clock(350)
  t2 = Clock(700)
  print(t1 != t2)
output: "True"
tag:
  - class/method/eq
